

#* === Тема: Почему нам нужно ООП и что такое объект ===

#? ООП (Объектно-Ориентированное Программирование) помогает нам организовывать программу,
#? объединяя данные и действия в одну целостную структуру, называемую объектом.
#? Без ООП мы бы использовали множество разрозненных данных, что было бы сложно поддерживать.
#? Давайте разберемся, что такое объект, и почему нам нужно ООП.

# * === Что такое объект? ===
#? Представьте себе, что каждый человек в вашей семье — это объект. У каждого есть свои данные (имя, возраст)
#? и свои действия (например, что он может делать, например, готовить, работать, учить детей).
#? В ООП, объект объединяет эти данные и действия в одном месте, как папка для каждого члена семьи.

#? Пример объекта "Человек", который имеет имя, возраст и метод, чтобы представиться:

# * === Элементы объекта ===
#? Объект состоит из двух основных элементов:
#? 1. Атрибуты — это данные, которые описывают объект (например, имя и возраст).
#? 2. Методы — это действия, которые объект может выполнять (например, представиться).

#! Пример:
#! 1. Атрибуты: name, age
#! 2. Метод: introduce


class Person:
    #* Конструктор: инициализация объекта с данными (имя и возраст) НАМ НУЖЕН ЧТОБЫ МОМЕНТАЛЬНО ПРИДАВАТЬ ЧЕЛОВЕКУ ОПР. ЗНАЧЕНИЯ
    def __init__(self, name, age):
        self.name = name  # Атрибут: имя
        self.age = age    # Атрибут: возраст

    # Метод: то, что может делать объект
    def introduce(self):
        return f"Привет, меня зовут {self.name} и мне {self.age} лет!"

# * === Почему мы создаем объекты? ===
# Если бы не было ООП, мы бы хранить информацию о каждом человеке в разных местах:
# имя, возраст и действия — всё бы было разрозненно и сложно для работы.

# ООП позволяет упорядочить все данные и действия в одном месте — объекте.
# Это упрощает работу с данными, поскольку мы можем оперировать целыми объектами, а не только отдельными кусочками информации.

# Пример использования объекта:

# Создаем объект "Папа"
dad = Person("Джон", 45)

# Получаем данные объекта (имя и возраст)
print(dad.name)        # Вывод: Джон
print(dad.age)         # Вывод: 45

# Вызываем метод, чтобы объект мог что-то сделать (представиться)
print(dad.introduce()) # Вывод: Привет, меня зовут Джон и мне 45 лет!


#* === Заключение ===
#? ООП помогает нам создавать объекты, которые группируют данные и действия в одном месте,
#? что позволяет легко работать с комплексными структурами данных. Это упрощает организацию кода,
#? делает его более понятным и удобным для расширения.

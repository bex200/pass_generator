

# -*- coding: utf-8 -*-
#* Кодировка UTF-8: это стандартная кодировка, позволяющая работать с текстом на разных языках.
#* Указание кодировки в начале файла гарантирует, что весь текст отображается корректно.

#? === Тема: Обработка Исключений в Python ===
# Исключения — это неожиданные ошибки, которые могут прервать выполнение программы.
# Используя обработку исключений, мы можем ловить такие ошибки и продолжать выполнение программы.
#! Примеры исключений: ZeroDivisionError, FileNotFoundError, ValueError

def divide_without_try():
    number = int(input('Введите число:'))
    divide_10 = 10 / number
    print(divide_10)
    print('Вы меня видите если нет ошибок, если есть, я пропадаю, т.к программа умирает')

# divide_without_try()




#* === 1. Пример деления чисел с обработкой исключений ===
def divide_numbers():
    try:
        number = int(input("Введите число: "))  # Пользователь вводит число
        result = 10 / number  # Деление на введенное число
        print("Результат деления:", result)
    except ZeroDivisionError:
        print("Ошибка: деление на ноль невозможно! ВВЕДИ НОРМ ЧИСЛО")  # Ошибка деления на ноль

    finally:
        print('ТЕПЕРЬ ДАЖЕ ПОСЛЕ ОШИБОК ЖИВЕМ И РАДУЕМСЯ, хотя бы увидим finally')   



# divide_numbers()

#* === 2. Пример чтения файла с обработкой исключений ===
def read_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            content = file.read()  # Чтение содержимого файла
            print("Содержимое файла:", content)
    except FileNotFoundError:
        print("Ошибка: файл не найден!")  # Ошибка, если файл не существует
    except PermissionError:
        print("Ошибка: недостаточно прав для открытия файла!")  # Ошибка недостатка прав
    except Exception as error:  # Общая ошибка
        print(f"Произошла ошибка: {error}")  # Выводим сообщение об ошибке
    finally:
        print("Завершение работы функции read_file.")
# Запустите функцию с несуществующим файлом
# read_file("non_existing_file.txt")

#* === 3. Пример обработки исключений при работе со списками ===
def list_example():
    my_list = [1, 2, 3]
    try:
        index = int(input("Введите индекс элемента для доступа (0-2): "))  # Пользователь вводит индекс
        print("Элемент на индексе", index, ":", my_list[index])  # Доступ к элементу по индексу
    except IndexError:
        print("Ошибка: индекс вне диапазона!")  # Ошибка при выходе за пределы списка
    except ValueError:
        print("Ошибка: введите корректный числовой индекс!")  # Ошибка при неправильном вводе

# Запустите функцию для демонстрации ошибок при работе со списками
# list_example()

#* === 4. Пример обработки исключений при работе с математическими функциями ===
import math

def calculate_square_root():
    try:
        number = float(input("Введите число для вычисления квадратного корня: "))  # Пользователь вводит число
        if number < 0:
            raise ValueError("Квадратный корень из отрицательного числа не существует!")  # Поднимаем собственное исключение
        result = math.sqrt(number)  # Вычисление квадратного корня
        print("Квадратный корень:", result)
    except ValueError as ve:
        print("Ошибка:", ve)  # Ошибка при неправильном вводе

# Запустите функцию для демонстрации работы с математическими исключениями
calculate_square_root()

# Запустите функцию для демонстрации ошибок ввода-вывода
# write_to_file("output.txt", "Это тестовое содержимое файла.")  # Запись в файл
